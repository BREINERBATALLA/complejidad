/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto.complejidad;

import com.mycompany.proyecto.complejidad.model.ProductDto;
import com.mycompany.proyecto.complejidad.model.RawMaterial;
import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PC
 */
public class Main extends javax.swing.JFrame {

    private static final String pathToSave = "C:\\models\\modelo.mzn";

    /**
     * Creates new form NewJFrame
     */
    public Main() {
        initComponents();
    }

    private String getInput() {
        return input.getText();
    }

    private void cleanInput() {
        input.setText("");
    }

    private String generateMiniZincCode(String solution) {
        return null;
    }

    private ProductDto toProductDto(String[] data) {

        return ProductDto.builder()
                .name(data[0])
                .salePrice(Integer.parseInt(data[1]))
                .rawMaterialQuantity(torawMaterialQuantity(data))
                .build();
    }

    private RawMaterial toRawMaterial(String[] data) {
        return RawMaterial.builder()
                .name(data[0])
                .cost(Integer.parseInt(data[1]))
                .availability(Integer.parseInt(data[2]))
                .build();
    }

    /*
            output[0] = Integer.parseInt(data[2]);
        output[1] = Integer.parseInt(data[3]);
        output[2] = Integer.parseInt(data[4]);
     */
    private Integer[] torawMaterialQuantity(String[] data) {
        int n = 2;
        Integer[] output = new Integer[data.length - 2]; //El -2 es por el nombre y el precio del producto, para saber cu√°ntas materias primas se tiene.
        for (int i = 0; i < (data.length - 2); i++) {
            output[i] = Integer.parseInt(data[n]); //inicia en 2, exluye nombre y precio de venta.
            n++;
        }
        return output;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        btn_calcular = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        solution_txt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        result_txt = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        input.setColumns(20);
        input.setRows(5);
        input.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                inputMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(input);

        btn_calcular.setBackground(new java.awt.Color(109, 177, 143));
        btn_calcular.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        btn_calcular.setText("SOLVE");
        btn_calcular.setToolTipText("");
        btn_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(365, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 380, 770));

        jPanel3.setBackground(new java.awt.Color(252, 205, 111));

        solution_txt.setColumns(20);
        solution_txt.setRows(5);
        jScrollPane2.setViewportView(solution_txt);

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel1.setText("MINIZINC CODE");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(200, 200, 200))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(188, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 490, 770));

        jPanel4.setBackground(new java.awt.Color(109, 177, 143));

        result_txt.setColumns(20);
        result_txt.setRows(5);
        jScrollPane3.setViewportView(result_txt);

        jLabel2.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel2.setText("RESULT");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(101, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(166, 166, 166))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(388, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 0, 430, 770));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String buildInitVariables(int quantity) { //quantity- numero de productois
        StringBuilder variables = new StringBuilder();
        for (int i = 0; i < quantity; i++) {
            variables.append("var int: ".concat("x").concat(String.valueOf(i + 1)
                    .concat("; ")));
        }
        variables.append("var 0.0..100000000.0: ".concat("z;")); //variable solucion
        variables.append("\n");
        variables.append("solve maximize z;");
        return variables.toString();
    }

    private String buildOutput(int quantity) {
        StringBuilder variables = new StringBuilder();
        variables.append("output[");
        for (int i = 0; i < quantity; i++) {
            variables.append("\"Producto".concat(String.valueOf(i + 1)).concat(": \" ++ ")
                    .concat(" ")
                    .concat("show(").concat("x").concat(String.valueOf(i + 1)
                    .concat(")").concat(" ++ ")
                    .concat("\"\\n\"")
                    .concat(",")));
            if ((i + 1) == quantity) { //terminamos variables, seguimos con ganancia(se puede hacer fuera del for tambi√©n)
                variables.append("\"Ganancia".concat(":\" , ")
                        .concat("show(").concat("z")
                        .concat(")").concat(", "));
            }
        }

        if (variables.toString().endsWith(", ")) {
            // Eliminar los √∫ltimos dos caracteres ("+ ").
            variables.delete(variables.length() - 2, variables.length());
        }
        variables.append("]");
        return variables.toString();
    }

    private Integer[] constraintsValues(Map<Integer, Integer[]> map, int index) {
        Integer[] boundRawMaterial = new Integer[map.size()];
        for (int i = 0; i < map.size(); i++) {
            Integer[] boundRawMaterialItem = map.get(i); //devuelve arreglo de los constraints
            boundRawMaterial[i] = boundRawMaterialItem[index];
        }
        return boundRawMaterial;
    }

    private String getSolution(String output, String variables, Map<Integer, String> contraints, int tam) {
        StringBuilder solution = new StringBuilder();
        solution.append(variables.concat("\n"));
        solution.append("\n");
        for (int i = 0; i < tam; i++) {
            solution.append(contraints.get(i)
                    .concat("\n"));
        }
        solution.append("\n");
        solution.append(output.concat("\n"));
        return solution.toString();
    }

    private Integer[] getCostByProduct(Integer[] costListRawMaterial, int t, Map<Integer, Integer[]> rawMaterialProducts) {
        Integer[] costRawMaterials = new Integer[t];
        for (int i = 0; i < t; i++) {
            costRawMaterials[i] = getCost(costListRawMaterial, rawMaterialProducts.get(i));
        }
        return costRawMaterials;
    }

    private Integer getCost(Integer[] costRawMaterial, Integer[] rawMaterialProduct) {
        Integer costProduct = 0;
        for (int i = 0; i < costRawMaterial.length; i++) {
            costProduct += rawMaterialProduct[i] * costRawMaterial[i];
        }
        return costProduct;

    }

    private Integer[] getRevenue(Integer[] costProducts, Integer[] salePriceProducts) {
        Integer[] revenueProducts = new Integer[salePriceProducts.length];
        for (int i = 0; i < salePriceProducts.length; i++) {
            revenueProducts[i] = salePriceProducts[i] - costProducts[i];
        }
        return revenueProducts;
    }

    private String buildFunction(Integer[] revenueProducts) { //Array de ganancia--- precio venta - costo
        StringBuilder function = new StringBuilder();
        if (revenueProducts[0] < 0) { //Cabecera -- si es negativo (-12)*x1
            function.append("(".concat(String.valueOf(revenueProducts[0]))
                    .concat(")")
                    .concat("*").concat("x").concat(String.valueOf(1)));
        } else {
            function.append(String.valueOf(revenueProducts[0]) //si es positivo 12*x1
                    .concat("*").concat("x").concat(String.valueOf(1)));
        }
        for (int i = 1; i < revenueProducts.length; i++) {
            if (revenueProducts[i] < 0) {
                function.append(" + (".concat(String.valueOf(revenueProducts[i]))
                        .concat(")")
                        .concat("*").concat("x").concat(String.valueOf(i + 1)));
            } else {
                function.append(" ".concat("+").concat(" ").concat(String.valueOf(revenueProducts[i])
                        .concat("*").concat("x").concat(String.valueOf(i + 1))));
            }
        }
        return function.toString(); //tal vez quitar espacio en el +., y como tratar los -
    }

    private Map<Integer, String> buildConstraints(Map<Integer, Integer[]> contraintValues, int t, Integer[] availabilityRawMaterial) { //mapa relaciona lo que necesitan de materia los productos con su disponibilidad.
        StringBuilder contrainst = new StringBuilder();
        Map<Integer, String> contraints = new HashMap();
        for (int i = 0; i < t; i++) {
            Integer[] values = contraintValues.get(i); //Obtiene arreglo 2 3 2 1 para la primera materia prima.
            for (int j = 0; j < values.length; j++) {
                if (!Objects.equals(values[j], 0) && !((j + 1) == values.length)) { //si es diferente de cero y no es el final(agrega +)
                    contrainst.append((String.valueOf(values[j])
                            .concat("*").concat("x").concat(String.valueOf(j + 1))
                            .concat(" ").concat("+").concat(" ")));
                } else if (!Objects.equals(values[j], 0) && Objects.equals((j + 1), values.length)) { //diferente de cero y es el final
                    contrainst.append((String.valueOf(values[j])
                            .concat("*").concat("x").concat(String.valueOf(j + 1))));
                }
            }
            if (contrainst.toString().endsWith("+ ")) {
                // Eliminar los √∫ltimos dos caracteres ("+ ").
                contrainst.delete(contrainst.length() - 2, contrainst.length());
            }
            contraints.put(i, contrainst.toString()); //0, [valores de constrains con variables de decision), ahora queda relacionarlas a la disponibilidad.
            contrainst.setLength(0); //reinicia stringBuilder.
        }

        return contraints;
    }

    private Map<Integer, String> buildContraintsWithAvailability(Map<Integer, String> contraints,
            Integer[] availabilityRawMaterial, String fun, int numProducts) { //lega lo que devuelve buildContraints y el arreglo de disponilidad para establecer el menor igual
        StringBuilder contrainst = new StringBuilder();
        Map<Integer, String> contraintsResult = new HashMap();
        for (int i = 0; i < availabilityRawMaterial.length; i++) {
            contraintsResult.put(i, "constraint ".concat(contraints.get(i)).concat(" <= ")
                    .concat(String.valueOf(availabilityRawMaterial[i]))
                    .concat(";"));
        }
        contraintsResult.put(availabilityRawMaterial.length, "constraint z = ".concat(fun)
                .concat(";")); //Constraint de la funci√≥n de maximizar
        int n = availabilityRawMaterial.length + numProducts;
        int j = 1;
        for (int i = availabilityRawMaterial.length + 1; i <= n; i++) {
            contraintsResult.put(i, "constraint ".concat("x")
                    .concat(String.valueOf(j))
                    .concat(">=0;").concat("\n")); //contraints de no negatividad.
            j++;
        }

        return contraintsResult;
    }

    private void saveModel(String content, String pathTosave) {
        try {
            // Crea el objeto Path desde la cadena de la ruta
            Path path = Paths.get(pathTosave);

            // Escribe el contenido en el archivo
            Files.write(path, content.getBytes());

            System.out.println("El modelo MiniZinc se ha guardado correctamente en: " + pathTosave);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void runMinizinc() throws InterruptedException {
        final StringBuilder result = new StringBuilder();
        try {
            ProcessBuilder processBuilder = new ProcessBuilder("cmd", "/c", "minizinc --solver gecode c:\\models\\modelo.mzn");
            Process process = processBuilder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            int exitCode = process.waitFor();
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line.concat("\n"));
            }
            result_txt.setText(result.toString());
            System.out.println("Proceso MiniZinc finalizado con c√≥digo de salida: " + exitCode);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void btn_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcularActionPerformed
        String[] inputArray = getInput().split("\n");
        int chemicalsQuantity = Integer.parseInt(inputArray[0]);
        int rawMaterialsQuantity = Integer.parseInt(inputArray[1]);
        ProductDto[] products = new ProductDto[chemicalsQuantity];
        RawMaterial[] rawMaterials = new RawMaterial[rawMaterialsQuantity];
        Integer[] costListRawMaterial = new Integer[rawMaterialsQuantity];
        Integer[] availabilityRawMaterial = new Integer[rawMaterialsQuantity];
        Integer[] salePriceProducts = new Integer[chemicalsQuantity];
        Map<Integer, Integer[]> rawMaterialProducts = new HashMap();
        Map<Integer, Integer[]> contraintValues = new HashMap();
        int tam = 0;
        int tamRawMaterials = 0;
        // Lectura de la informaci√≥n de productos) - sacar en m√©todos
        for (int i = 2; i <= chemicalsQuantity + 1; i++) {
            products[tam] = toProductDto(inputArray[i].split(" "));
            salePriceProducts[tam] = products[tam].getSalePrice();
            rawMaterialProducts.put(tam, products[tam].getRawMaterialQuantity());
            tam++;
        }

        for (int i = chemicalsQuantity + 2; i <= rawMaterialsQuantity + chemicalsQuantity + 1; i++) {
            rawMaterials[tamRawMaterials] = toRawMaterial(inputArray[i].split(" "));
            costListRawMaterial[tamRawMaterials] = rawMaterials[tamRawMaterials].getCost();
            availabilityRawMaterial[tamRawMaterials] = rawMaterials[tamRawMaterials].getAvailability();
            tamRawMaterials++;
        }

        for (int i = 0; i < rawMaterialsQuantity; i++) {
            contraintValues.put(i, constraintsValues(rawMaterialProducts, i));
        }

        Integer[] cost = getCostByProduct(costListRawMaterial, chemicalsQuantity, rawMaterialProducts);
        Integer[] revenue = getRevenue(cost, salePriceProducts);
        String fun = buildFunction(revenue);
        Map<Integer, String> contraints = buildConstraints(contraintValues, rawMaterialsQuantity, availabilityRawMaterial);
        Map<Integer, String> contraintComplete = buildContraintsWithAvailability(contraints, availabilityRawMaterial, fun, chemicalsQuantity);
        String variables = buildInitVariables(chemicalsQuantity);
        String output = buildOutput(chemicalsQuantity);
        String solution = getSolution(output, variables, contraintComplete, chemicalsQuantity + rawMaterialsQuantity + 1);
        solution_txt.setText(solution);
        saveModel(solution, pathToSave);
        try {
            runMinizinc();
        } catch (InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        cleanInput();

    }//GEN-LAST:event_btn_calcularActionPerformed

    private void inputMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputMouseEntered
       solution_txt.setText("");
       result_txt.setText("");
    }//GEN-LAST:event_inputMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calcular;
    private javax.swing.JTextArea input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea result_txt;
    private javax.swing.JTextArea solution_txt;
    // End of variables declaration//GEN-END:variables

}
